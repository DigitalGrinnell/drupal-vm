---
- name: Check if site is already installed.
  command: >
    {{ drush_path }} status bootstrap
    chdir={{ drupal_core_path }}
  register: drupal_site_installed
  failed_when: "drupal_site_installed.stdout is undefined"
  changed_when: false
  become: no

# See: https://www.drupal.org/node/2569365#comment-11680807
- name: Configure database correctly if using PostgreSQL.
  command: psql -c "ALTER DATABASE {{ drupal_db_name }} SET bytea_output = 'escape';"
  when: "('Successful' not in drupal_site_installed.stdout) and (drupalvm_database == 'pgsql')"
  become: yes
  become_user: "{{ postgresql_user }}"
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
    ansible_ssh_pipelining: true

- name: Install Drupal with drush.
  command: >
    {{ drush_path }} site-install {{ drupal_install_profile | default('standard') }} -y
    --site-name="{{ drupal_site_name }}"
    --account-name={{ drupal_account_name }}
    --account-pass={{ drupal_account_pass }}
    --db-url={{ drupalvm_database }}://{{ drupal_db_user }}:{{ drupal_db_password }}@localhost/{{ drupal_db_name }}
    {{ drupal_site_install_extra_args | default([]) | join(" ") }}
    chdir={{ drupal_core_path }}
  notify: restart webserver
  when: "'Successful' not in drupal_site_installed.stdout"
  become: no

#- name: Install configured modules with drush.
#  command: >
#    {{ drush_path }} pm-enable -y {{ drupal_enable_modules | join(" ") }}
#    chdir={{ drupal_core_path }}
#  when: "'Successful' not in drupal_site_installed.stdout"
#  become: no

# Additions below this line made initially in the 'rootstalk' branch.

# Set drupal path file ownership.
- name: Set proper drupal path ownership.
  file:
    path: "{{ drupal_composer_install_dir }}"
    state: directory
    owner: "{{ vagrant_user }}"
    group: "{{ drupal_group }}"
    recurse: yes
  become: yes

# http://drupal.stackexchange.com/questions/200771/how-do-i-change-the-default-theme-with-drush-master
- name: Set selected theme as default.
  command: >
    {{ drush_path }} -y config-set system.theme default {{ drupal_default_theme }}
    chdir={{ drupal_core_path }}/sites/default
  become: no

# Check if {{ drupal_db_archive }} file exists.  See config.yml for the file path.
- name: Checking if {{ drupal_db_archive }} exists.
  stat: path={{ drupal_db_archive }}
  register: restore_db

# If {{ drupal_db_archive }} file exists, restore it using drush.
# From your HOST, use rootstalk_create_backup (defined in backup_and_restore.sh) to create an archive dump.
- name: Restore previous drupal DB archive.
  command: >
    {{ drush_path }} -u 1 -y arr {{ drupal_db_archive }} default --tar-options='vz' --overwrite
    chdir={{ drupal_core_path }}/..
  when: restore_db.stat.exists == True
  become: yes

# Check for pdf.js
- stat: path={{ drupal_core_path }}/libraries/pdf.js
  register: pdfjs_dist

# Fetch the pdf.js pre-built distribution
- name: Fetch pdf.js distribution
  git:
    repo: "https://github.com/mozilla/pdfjs-dist.git"
    dest: "{{ drupal_core_path }}/libraries/pdf.js"
    update: yes
  when: pdfjs_dist.stat.exists == False

# Set file permissions in the additions.
- name: Set proper files ownership in the additions.
  file:
    path: "{{ drupal_core_path }}"
    state: directory
    owner: "{{ vagrant_user }}"
    group: "{{ drupal_group }}"
    recurse: yes
  become: yes

# Flush the cache if the DB was restored from backup!
- name: Flush the cache.
  command: >
    {{ drush_path }} -u 1 -y cr all
    chdir={{ drupal_core_path }}/sites/default
  when: restore_db.stat.exists == True
  become: yes

